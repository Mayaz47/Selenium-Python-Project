# -*- coding: utf-8 -*-
"""Selenium Task - Maiyaz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GpUL9IlOv-j8HhuQ6w4DoyaXy4dc1kvz
"""

!pip install selenium

!apt-get update
!apt-get install -y chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# Configure Chrome options
chrome_options = Options()
chrome_options.add_argument("--headless")  # Run in headless mode
chrome_options.add_argument("--no-sandbox")  # Required for Colab
chrome_options.add_argument("--disable-dev-shm-usage")  # Overcome limited resources

# Create WebDriver instance
driver = webdriver.Chrome(options=chrome_options)

# Open a website
driver.get("https://www.google.com")
print(driver.title)  # Output: Google

# Close the browser
driver.quit()

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time

# Configure Chrome options for headless mode
chrome_options = Options()
chrome_options.add_argument("--headless")  # Run in headless mode
chrome_options.add_argument("--no-sandbox")  # Required for Colab
chrome_options.add_argument("--disable-dev-shm-usage")  # Overcome limited resources

# Start WebDriver
driver = webdriver.Chrome(options=chrome_options)

# Function to fetch autocomplete suggestions
def fetch_suggestions(keyword):
    driver.get("https://www.google.com")
    search_box = driver.find_element("name", "q")
    search_box.send_keys(keyword)
    time.sleep(2)  # Wait for suggestions to load

    # Fetch suggestions from the dropdown
    suggestions = driver.find_elements("xpath", "//ul[@role='listbox']//li/descendant::span")
    suggestion_texts = [s.text for s in suggestions]
    if suggestion_texts:  # Ensure there are valid suggestions
        # Strip whitespace and filter empty suggestions
        cleaned_suggestions = [s.strip() for s in suggestion_texts if s.strip()]
    return cleaned_suggestions

# Keywords to search
keywords = ["Dhaka", "Saturday", "Baby", "School", "Cricket", "Money", "Int", "Look", "Hello", "By"]

# Initialize results
results = []

for keyword in keywords:
    suggestions = fetch_suggestions(keyword)
    if suggestions:
        longest = max(suggestions, key=len)
        shortest = min(suggestions, key=len)
    else:
        longest = shortest = "No suggestions"
    results.append((keyword, longest, shortest))

driver.quit()

# Display results
for keyword, longest, shortest in results:
    print(f"Keyword: {keyword}")
    print(f"  Longest: {longest}")
    print(f"  Shortest: {shortest}")
    print()

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
import openpyxl
import os


chrome_options = Options()
chrome_options.add_argument("--headless")  # Run in headless mode
chrome_options.add_argument("--no-sandbox")  # Required for Colab
chrome_options.add_argument("--disable-dev-shm-usage")  # Overcome limited resources
driver = webdriver.Chrome(options=chrome_options)


file_name = "keyword_suggestions.xlsx"


if not os.path.exists(file_name):
    workbook = openpyxl.Workbook()
    days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    for i, day in enumerate(days_of_week):
        if i == 0:
            sheet = workbook.active
            sheet.title = day
        else:
            workbook.create_sheet(title=day)
        sheet = workbook[day]
        sheet.append(["Keyword", "Longest Option", "Shortest Option"])

    workbook.save(file_name)

# Function to fetch longest and shortest suggestions
def fetch_suggestions(keyword):
    driver.get("https://www.google.com")
    search_box = driver.find_element(By.NAME, "q")
    search_box.send_keys(keyword)
    time.sleep(2)  # Wait for suggestions to load

    # Fetch suggestions from the dropdown
    suggestions = driver.find_elements(By.XPATH, "//ul[@role='listbox']//li/descendant::span")
    suggestion_texts = [s.text.strip() for s in suggestions if s.text.strip()]

    if suggestion_texts:
        longest = max(suggestion_texts, key=len)
        shortest = min(suggestion_texts, key=len)
    else:
        longest = "No suggestions"
        shortest = "No suggestions"

    return longest, shortest

# Main loop for user input
print("\nDays of the week:")
print("1. Sunday\n2. Monday\n3. Tuesday\n4. Wednesday\n5. Thursday\n6. Friday\n7. Saturday")

while True:
    day_choice = input("Enter the number corresponding to the day you're working on (or 'exit' to quit): ")

    if day_choice.lower() == "exit":
        break

    if day_choice not in ["1", "2", "3", "4", "5", "6", "7"]:
        print("Invalid choice. Please select a valid day.")
        continue

    day_index = int(day_choice) - 1
    days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    selected_day = days_of_week[day_index]

    print(f"You selected {selected_day}. Enter keywords. Type 'exit' to stop entering keywords for this day.")

    workbook = openpyxl.load_workbook(file_name)
    sheet = workbook[selected_day]

    while True:
        keyword = input("Enter the keyword to search (or 'exit' to stop for this day): ")
        if keyword.lower() == "exit":
            break

        # Fetch suggestions for the keyword
        longest, shortest = fetch_suggestions(keyword)

        # Append the data to the sheet
        print(f"Longest: {longest}")
        print(f"Shortest: {shortest}")
        sheet.append([keyword, longest, shortest])
        print(f"Data saved for '{keyword}' in the '{selected_day}' table.")

    # Save data to the workbook for the selected day
    workbook.save(file_name)
    print(f"All data for {selected_day} has been saved.")

# Close the WebDriver
driver.quit()

print("Program terminated.")